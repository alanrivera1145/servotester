import pigpio
import time
import sys
import termios
import tty

# ==== CONFIGURATION ====
SERVO_PIN = 18  # GPIO18 (hardware PWM capable)
STEP = 100      # Microseconds per key press (approx 9¬∞‚Äì10¬∞ per 100us)
MIN_PW = 500    # Minimum pulse width (0¬∞)
MAX_PW = 2500   # Maximum pulse width (180¬∞)

# Start pulse width centered
pulse_width = 1500

# Connect to pigpio daemon
pi = pigpio.pi()
if not pi.connected:
    print("‚ùå Cannot connect to pigpio daemon. Make sure it's running.")
    sys.exit(1)

# Set initial position
pi.set_servo_pulsewidth(SERVO_PIN, pulse_width)

def get_key():
    """Read single keypress (supports arrow keys)"""
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setcbreak(fd)
        ch1 = sys.stdin.read(1)
        if ch1 == '\x1b':  # Escape sequence (arrow keys)
            ch2 = sys.stdin.read(1)
            ch3 = sys.stdin.read(1)
            return ch3
        else:
            return ch1
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

print("üîÅ Use ‚Üê and ‚Üí to move the servo")
print("‚è∫ Space = center, q = quit")

try:
    while True:
        key = get_key()
        if key == 'C':  # ‚Üí Right
            if pulse_width < MAX_PW:
                pulse_width += STEP
                pulse_width = min(pulse_width, MAX_PW)
                pi.set_servo_pulsewidth(SERVO_PIN, pulse_width)
                print(f"‚Üí {pulse_width} ¬µs")

        elif key == 'D':  # ‚Üê Left
            if pulse_width > MIN_PW:
                pulse_width -= STEP
                pulse_width = max(pulse_width, MIN_PW)
                pi.set_servo_pulsewidth(SERVO_PIN, pulse_width)
                print(f"‚Üê {pulse_width} ¬µs")

        elif key == ' ':  # Spacebar
            pulse_width = 1500
            pi.set_servo_pulsewidth(SERVO_PIN, pulse_width)
            print("‚è∫ Centered (1500 ¬µs)")

        elif key == 'q':
            print("Exiting...")
            break

        time.sleep(0.05)

except KeyboardInterrupt:
    print("\nStopped by user.")

finally:
    pi.set_servo_pulsewidth(SERVO_PIN, 0)  # Turn off servo signal
    pi.stop()
    print("Servo released.")
